#server.port=8081
server.port=${PORT:8080}

# La proprietà spring.web.resources.cache.cachecontrol.max-age=3600 imposta la durata della cache per le risorse
# statiche a 1 ora, migliorando i tempi di caricamento e riducendo il carico del server.
# spring.web.resources.cache.cachecontrol.max-age=3600

# Queste proprietà abilitano e configurano la compressione dei file CSS e JavaScript in Tomcat per ridurre la loro
# dimensione durante il trasferimento, migliorando la velocità di caricamento.
# server.tomcat.compression.enabled=true
# server.tomcat.compression.mime-types=text/css,text/javascript
# server.tomcat.compression.min-response-size=1024

# Configura il fuso orario dell'applicazione per essere quello di Roma. L'orario è impostato per lo Scheduler
spring.jackson.time-zone=Europe/Rome

# create: Crea tabelle da zero ogni volta che l'applicazione viene avviata. # Elimina e ricrea le tabelle, perdendo eventuali dati esistenti.
# update: Aggiorna automaticamente lo schema del database per riflettere le modifiche alle entità. # Non elimina dati esistenti ma apporta modifiche allo schema.
# create-drop: Crea tabelle all'avvio e le elimina quando l'applicazione viene chiusa. # Utile per test, dove si desidera un database fresco per ogni esecuzione.
# none: Non esegue modifiche automatiche sullo schema del database. # Richiede la gestione manuale dello schema.
spring.jpa.hibernate.ddl-auto=update

# Hibernate stampa sul log le query SQL che esegue
spring.jpa.properties.hibernate.show_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE




# Versione di PostgreSQL: PostgreSQL 15.4 (Ubuntu 15.4-1.pgdg20.04+1) on x86_64-pc-linux-gnu,
# compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0, 64-bit
spring.datasource.host=${DB_HOST}
spring.datasource.port=${DB_PORT}
spring.datasource.database=${DB_DATABASE}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.datasource.url=jdbc:postgresql://${DATABASE_URL}

# Configurazione Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect



# gpt-4o :                  $5.00 / 1M input tokens
# gpt-4o-mini :             $0.150 / 1M input tokens
# gpt-3.5-turbo-0125 :      $0.50 / 1M tokens (max 4096 tokens)
# gpt-3.5-turbo-instruct:   $1.50 / 1M tokens

# API OPENAI
api.key.openai=${API_KEY_OPENAI}
api.openai.model.gpt.4=gpt-4o
api.openai.model.gpt.4.mini=gpt-4o-mini
api.openai.model.gpt.3.5=gpt-3.5-turbo-0125
api.openai.model.gpt.3.5.turbo.instruct=gpt-3.5-turbo-instruct



# EMAIL LUNASAPIENS.COM
mail.username=info@lunasapiens.com
mail.password=${MAIL_PASSWORD}
mail.smtp.host=smtpout.secureserver.net
mail.smtp.port=587
mail.smtp.auth=true
mail.smtp.starttls.enable=true
mail.debug=false

# EMAIL GMAIL
#Gmail, per modificare la password andare a https://myaccount.google.com/security e poi alla pagina https://security.google.com/settings/security/apppasswords
# mail.default.from=LunaSapiens <info@lunasapiens.com> # vanno nello spam se invii email con questo from. Perché in realtà la email è gmail.com
gmail.mail.username=matteo.manili@gmail.com 
gmail.mail.password=${GMAIL_MAIL_PASSWORD} 
gmail.mail.smtp.host=smtp.gmail.com
gmail.mail.smtp.port=587


# JWT (per creare la key publc RSA e la key private RSA vedere classe JwtConfig. c'è un codice java che le crea)
jwt.rsa.public.key=${JWT_RSA_PUBLIC}
jwt.rsa.private.key=${JWT_RSA_PRIVATE}


# API geonames.org
api.geonames.username=${GEONAMES_USERNAME}


# TELEGRAM https://t.me/LunaSapiensUser_bot
api.telegram.bot.username=LunaSapiensUser_bot
api.telegram.chatId=${API_TELEGRAM_CHAT_ID}
api.telegram.token=${API_TELEGRAM_TOKEN}


# FACEBOOK
api.facebook.appid=1005031077419678
api.facebook.appsecret=${API_FACEBOOK_APPSECRET}
api.facebook.idpage=372816732588147


# TIKTOK
api.tiktok.clientKey=NULL
api.tiktok.clientSecret=NULL
api.tiktok.redirectUri=https://www.lunasapiens.com/tiktok-outh/
# user.info.basic , video.publish , video.upload
api.tiktok.scope=video.publish
api.tiktok.authorizationUrl=https://www.tiktok.com/v2/auth/authorize/


